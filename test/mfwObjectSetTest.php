<?php
require_once __DIR__.'/initialize.php';

/**
 * Test class for mfwObjectSet.
 * Generated by PHPUnit on 2012-12-17 at 13:09:29.
 */
class mfwObjectSetTest extends PHPUnit_Framework_TestCase
{

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	public function testConstruct()
	{
		$set = new TestObjectSet;
		$this->assertEquals(array(),$set->getRows());

		$testarr = array(
			array('key'=>3,'value'=>1),
			array('value'=>5),
			array('key'=>10,'value'=>2),
			array('value'=>6),
		);
		$ref = array(
			3 => array('key'=>3,'value'=>1),
			'-undefKey-1' => array('value'=>5),
			10 => array('key'=>10,'value'=>2),
			'-undefKey-2' => array('value'=>6),
			);
		$set = new TestObjectSet($testarr);
		$this->assertEquals($ref,$set->getRows());
	}

	public function testObjectCache()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		$obj = $set[1];
		$obj2 = $set[1];
		$hash1 = spl_object_hash($obj);
		$hash2 = spl_object_hash($obj2);

		$this->assertEquals($hash1,$hash2);
	}

	/**
	 */
	public function testCount()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		$this->assertEquals(2,$set->count());
	}

	/**
	 * for array access interface
	 */
	public function testOffsetExists()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);

		$set = new TestObjectSet($testarr);

		$this->assertFalse($set->offsetExists(0));
		$this->assertTrue($set->offsetExists(1));
		$this->assertTrue($set->offsetExists(2));
		$this->assertFalse($set->offsetExists(3));

		$this->assertFalse(isset($set[0]));
		$this->assertTrue(isset($set[1]));
		$this->assertTrue(isset($set[2]));
		$this->assertFalse(isset($set[3]));
	}

	/**
	 * for array access interface
	 */
	public function testOffsetGet()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		$this->assertEquals($testarr[0],$set->offsetGet(1)->toArray());
		$this->assertNull($set->offsetGet(3));
	}

	/**
	 * @depends testOffsetGet
	 */
	public function testOffsetGetCache()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		// 同じoffsetの場合同一のobjectを返す
		$obj1 = $set[1];
		$obj2 = $set[1];
		$hash1 = spl_object_hash($obj1);
		$hash2 = spl_object_hash($obj2);
		$this->assertEquals($hash1,$hash2);
	}

	/**
	 * for array access interface
	 */
	public function testOffsetSetWithoutOffset()
	{
		$objarr = array('key'=>1,'value'=>1);
		$obj = new TestObject($objarr);
		$hash1 = spl_object_hash($obj);

		$set = new TestObjectSet();

		$set->offsetSet(null,$obj);
		$rows = $set->getRows();
		$this->assertEquals($objarr,$rows[1]);
		$objcache = $set->getObjCache();
		$this->assertEquals($hash1,spl_object_hash($objcache[1]));

		$set[] = $obj;
		$rows = $set->getRows();
		$this->assertEquals(1,count($rows));
	}

	public function testOffsetSetWithoutOffsetAndId()
	{
		$objarr = array('value'=>1);
		$obj = new TestObject($objarr);
		$hash1 = spl_object_hash($obj);

		$set = new TestObjectSet();

		$set[] = $obj;

		$rows = $set->getRows();
		$keys = array_keys($rows);

		$this->assertEquals($objarr,array_pop($rows));
		$objcache = $set->getObjCache();
		$hash2 = spl_object_hash(array_pop($objcache));
		$this->assertEquals($hash1,$hash2);

		$set[] = $obj;
		$rows = $set->getRows();
		$this->assertEquals(2,count($rows));
		$objcache = $set->getObjCache();
		$this->assertEquals(2,count($objcache));

		// 上書かれた側の実体・キャッシュは消える
		$set[$keys[0]] = $obj;
		$rows = $set->getRows();
		$this->assertEquals(2,count($rows));
		$this->assertFalse(isset($rows[$keys[0]]));
		$objcache = $set->getObjCache();
		$this->assertEquals(2,count($objcache));
		$this->assertFalse(isset($objcache[$keys[0]]));

	}

	public function testOffsetSetWithOffset()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		// まだ存在しないIDを入れたとき
		$set[3] = new TestObject(array('key'=>3,'value'=>3));
		$rows = $set->getRows();
		$last = array_pop($rows);
		$this->assertEquals(3,$last['key']);
		$cache = $set->getObjCache();
		$this->assertTrue($cache[3] instanceof TestObject);

		// すでにあるものを上書きしたとき
		$set[2] = new TestObject(array('key'=>2,'value'=>20));
		$rows = $set->getRows();
		$this->assertEquals(array(1,2,3),array_keys($rows));
		$this->assertEquals(20,$rows[2]['value']);
		$cache = $set->getObjCache();
		$this->assertEquals(
			array('key'=>2,'value'=>20),
			$cache[2]->toArray());

		// 既にあるものを違うIDのオブジェクトでうわがきしたとき
		$set[2] = new TestObject(array('key'=>10,'value'=>10));
		$rows = $set->getRows();
		$this->assertEquals(array(1,10,3),array_keys($rows));
		$this->assertEquals(10,$rows[10]['value']);
		$cache = $set->getObjCache();
		$this->assertEquals(
			array('key'=>10,'value'=>10),
			$cache[10]->toArray());
		$this->assertFalse(isset($cache[2]));
	}

	/**
	 * for array access interface
	 * @depends testCount
	 */
	public function testOffsetUnset()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		$set->offsetUnset(1);
		$rows = $set->getRows();
		$this->assertFalse(isset($rows[1]));
		$this->assertEquals($testarr[1],$rows[2]);

		$set[2]; // create obj_cache.
		unset($set[2]);
		$obj_cache = $set->getObjCache();
		$this->assertFalse(isset($obj_cache[2]));
	}

	/**
	 * Iterator interface (foreach)
	 */
	public function testIteratorInterface()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			array('key'=>3,'value'=>3),
			);
		$set = new TestObjectSet($testarr);

		$t = array();
		foreach($set as $k=>$v){
			$t[] = $v->toArray();
		}
		$this->assertEquals($testarr,$t);
	}

	/**
	 * Iterator interface (illegal unset in foreach block)
	 * @depends testOffsetUnset
	 */
	public function testIllegalForeach()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		$t = array();
		foreach($set as $k=>$v){
			if($k==1){
				unset($set[2]);
			}
			if($k==2){
				$this->assertNull($v);
				break;
			}
		}
	}


	/**
	 */
	public function testGetAll()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		$all = $set->getAll();

		foreach($testarr as $v){
			$this->assertEquals($v,$set[$v['key']]->toArray());
		}
	}

	/**
	 */
	public function testToArray()
	{
		$testarr = array(
			array('key'=>1,'value'=>3),
			array('key'=>2,'value'=>4),
			);
		$set = new TestObjectSet($testarr);

		$exp = array(
			1 => array('key'=>1,'value'=>3),
			2 => array('key'=>2,'value'=>4),
			);
		$this->assertEquals($exp,$set->toArray());
	}

	/**
	 */
	public function testGetColumnArray()
	{
		$testarr = array(
			array('key'=>1,'value'=>3),
			array('key'=>2,'value'=>4),
			);
		$set = new TestObjectSet($testarr);

		$this->assertEquals($set->getColumnArray('key'),array(1,2));
		$this->assertEquals($set->getColumnArray('value'),array(3,4));
	}

	/**
	 */
	public function testSearchPK()
	{
		$testarr = array(
			array('key'=>1,'value'=>3),
			array('key'=>2,'value'=>4),
			array('key'=>3,'value'=>3),
			);
		$set = new TestObjectSet($testarr);

		$this->assertEquals(1,$set->searchPK('value',3));
		$this->assertEquals(2,$set->searchPK('key',2));
		$this->assertNull($set->searchPK('value',-1));
	}

	/**
	 * @depends testGetColumnArray
	 */
	public function testSort()
	{
		$testarr = array(
			array('key'=>1,'value'=>3),
			array('key'=>2,'value'=>1),
			array('key'=>3,'value'=>2),
			);
		$set = new TestObjectSet($testarr);

		$set->sort(function($a,$b){
				return $a['value'] - $b['value'];
			});
		$rows = $set->getRows();
		$this->assertEquals(array(2,3,1),array_keys($rows));
		$this->assertEquals(array(2,3,1),$set->getColumnArray('key'));
		$this->assertEquals(array(1,2,3),$set->getColumnArray('value'));
	}

	/**
	 * @depends testGetColumnArray
	 */
	public function testFilter()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			array('key'=>3,'value'=>3),
			);
		$set = new TestObjectSet($testarr);

		$setf = $set->filter(function($a){return (bool)($a['value']%2);});
		$this->assertEquals(array(1,3),$setf->getColumnArray('value'));
	}

	/**
	 */
	public function testSlice()
	{
		$testarr = array(
			array('key'=>1,'value'=>1),
			array('key'=>2,'value'=>2),
			array('key'=>3,'value'=>3),
			array('key'=>4,'value'=>5),
			array('key'=>5,'value'=>4),
			);
		$set = new TestObjectSet($testarr);

		$set = $set->slice(1,3);
		$rows = $set->getRows();
		$exp = array(
			2 => array('key'=>2,'value'=>2),
			3 => array('key'=>3,'value'=>3),
			4 => array('key'=>4,'value'=>5),
			);
		$this->assertEquals($exp,$rows);
	}

	/**
	 */
	public function testSortBy()
	{
		$testarr = array(
			array('key'=>1,'value'=>2),
			array('key'=>2,'value'=>4),
			array('key'=>3,'value'=>1),
			array('key'=>4,'value'=>3),
			);
		$set = new TestObjectSet($testarr);

		$set->sortBy('value');
		$keys = array_keys($set->getRows());
		$exp = array(3,1,4,2);
		$this->assertEquals($exp,$keys);
	}

	/**
	 */
	public function testSortByDesc()
	{
		$testarr = array(
			array('key'=>1,'value'=>2),
			array('key'=>2,'value'=>4),
			array('key'=>3,'value'=>1),
			array('key'=>4,'value'=>3),
			);
		$set = new TestObjectSet($testarr);

		$set->sortByDesc('value');
		$keys = array_keys($set->getRows());
		$exp = array(2,4,1,3);
		$this->assertEquals($exp,$keys);
	}

	/**
	 */
	public function testShuffle()
	{
		$testarr = array(
			array('key'=>1,'value'=>2),
			array('key'=>2,'value'=>4),
			array('key'=>3,'value'=>1),
			array('key'=>4,'value'=>3),
			array('key'=>5,'value'=>2),
			array('key'=>6,'value'=>4),
			array('key'=>7,'value'=>1),
			array('key'=>8,'value'=>3),
			);
		$set = new TestObjectSet($testarr);

		$set->shuffle();
		$keys = array_keys($set->getRows());
		$this->assertNotEquals(array(1,2,3,4,5,6,7,),$keys);
	}

}

