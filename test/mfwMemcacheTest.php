<?php
require_once __DIR__.'/initialize.php';

/**
 * Test class for mfwMemcache.
 * Generated by PHPUnit on 2012-12-21 at 13:12:16.
 */
class mfwMemcacheTest extends PHPUnit_Framework_TestCase
{
	protected $property_mc;
	protected $method_connect;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->property_mc = new ReflectionProperty('mfwMemcache','mc');
		$this->property_mc->setAccessible(true);
		$this->method_connect = new ReflectionMethod('mfwMemcache','connect');
		$this->method_connect->setAccessible(true);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	public function testInvalidConnect()
	{
		$this->property_mc->setValue(null);
		mfwServerEnv::setEnv('unconnectable');

		elb_start();
		$mc = @$this->method_connect->invoke(null);
		$err = elb_get_clean();
		$this->assertNull($mc);
		$this->assertStringStartsWith('cannot connect memcached',$err);
	}

	public function testNoServer()
	{
		elb_start();
		$this->property_mc->setValue(null);
		mfwServerEnv::setEnv('noserver');
		$msg = '';
		try{
			$mc = $this->method_connect->invoke(null);
		}
		catch(Exception $e){
			$msg = $e->getMessage();
		}
		$this->assertStringStartsWith('memcache server undefined',$msg);
		elb_get_clean();
	}

	public function testConnect()
	{
		$this->property_mc->setValue(null);

		mfwServerEnv::setEnv('unittest');
		$mc = $this->method_connect->invoke(null);

		$this->assertEquals('Memcache',get_class($mc));
	}

	/**
	 * @depends testConnect
	 */
	public function testDisconnect()
	{
		mfwServerEnv::setEnv('unittest');
		$this->method_connect->invoke(null);

		mfwMemcache::disconnect();
		$this->assertNull($this->property_mc->getValue());
	}


	/**
	 * @depends testConnect
	 */
	public function testSetGet()
	{
		mfwServerEnv::setEnv('unittest');
		$key = 'asdfghjkl';
		$value = 'qwertyuiop';

		mfwMemcache::set($key,$value);
		$ret = mfwMemcache::get($key);

		$this->assertEquals($value,$ret);
	}


	/**
	 * @depends testConnect
	 * @depends testSetGet
	 */
	public function testDelete()
	{
		mfwServerEnv::setEnv('unittest');
		$key = 'asdfghjkl222';
		$value = 'qwertyuiop333';

		mfwMemcache::set($key,$value);
		mfwMemcache::delete($key);

		$this->assertFalse(mfwMemcache::get($key));
	}

	/**
	 * @depends testConnect
	 * @depends testSetGet
	 */
	public function testFlush()
	{
		mfwServerEnv::setEnv('unittest');
		$key = 'asdfghjk44444';
		$value = 'qwertyuiop5555';

		mfwMemcache::set($key,$value);
		mfwMemcache::flush();

		$this->assertFalse(mfwMemcache::get($key));
	}

	/**
	 * @depends testConnect
	 * @depends testSetGet
	 */
	public function testStoreURL()
	{
		mfwServerEnv::setEnv('unittest');
		$url = 'http://localhost/index.php?hoge=1';

		$hash = mfwMemcache::storeURL($url);
		$ret = mfwMemcache::get("URL_{$hash}");

		$this->assertEquals($url,$ret);
	}

	/**
	 * @depends testConnect
	 * @depends testStoreURL
	 */
	public function testFetchURL()
	{
		mfwServerEnv::setEnv('unittest');
		$url = 'http://localhost/main.php?fuga=2';

		$hash = mfwMemcache::storeURL($url);
		$ret = mfwMemcache::fetchURL($hash);
		$this->assertEquals($url,$ret);

		$ret = mfwMemcache::fetchURL(null);
		$this->assertFalse($ret);
	}
}
?>
