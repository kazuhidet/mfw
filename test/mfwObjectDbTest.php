<?php
require_once __DIR__.'/initialize.php';

$sql_log = array();

function sql_logger($sql)
{
	global $sql_log;
	$sql_log[] = $sql;
}
function last_sql()
{
	global $sql_log;
	$count = count($sql_log);
	return isset($sql_log[$count-1])? $sql_log[$count-1]: null;
}
function clear_sql_log()
{
	global $sql_log;
	$sql_log = array();
}

/**
 * Test class for mfwObjectDb.
 * Generated by PHPUnit on 2013-01-02 at 21:19:33.
 */
class mfwObjectDbTest extends PHPUnit_Framework_TestCase
{
	public static function setUpBeforeClass()
	{
		mfwServerEnv::setEnv('unittest');

		$table = TestObjectDb::TABLE_NAME;
		mfwDBIBase::query("drop table if exists $table");
		mfwDBIBase::query("create table `$table` (
			`key` int(11) NOT NULL AUTO_INCREMENT,
			`value` int(11) DEFAULT NULL,
			PRIMARY KEY (`key`)
		) ENGINE=InnoDB DEFAULT CHARSET=utf8");
		mfwDBIBase::query("insert into `$table`
			values (1,1),(2,2),(3,3)");

		runkit_method_rename('mfwDBIBase','prepare','org_prepare');
		runkit_method_add(
			'mfwDBIBase','prepare',
			'$sql,$con=null',
			'sql_logger($sql); return self::org_prepare($sql,$con);',
			RUNKIT_ACC_PUBLIC);
	}
	public static function tearDownAfterClass()
	{
		runkit_method_remove('mfwDBIBase','prepare');
		runkit_method_rename('mfwDBIBase','org_prepare','prepare');
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		clear_sql_log();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 */
	public function testSelectAll()
	{
		$objs = TestObjectDb::selectAll();
		$this->assertTrue($objs instanceof TestObjectSet);
		$this->assertEquals(3,$objs->count());
		$this->assertEquals(array('key'=>1,'value'=>1),$objs[1]->toArray());
		$this->assertEquals(array('key'=>2,'value'=>2),$objs[2]->toArray());
		$this->assertEquals(array('key'=>3,'value'=>3),$objs[3]->toArray());
	}

	/**
	 */
	public function testRetrieveByPK()
	{
		$obj = TestObjectDb::retrieveByPK(2);
		$this->assertTrue($obj instanceof TestObject);
		$this->assertEquals(array('key'=>2,'value'=>2),$obj->toArray());

		$obj = TestObjectDb::retrieveByPK(1000);
		$this->assertNull($obj);
	}

	/**
	 */
	public function testRetrieveByPKForUpdate()
	{
		$obj = TestObjectDb::retrieveByPKForUpdate(2);

		$sql = last_sql();
		$exp = 'SELECT * FROM `test_object` WHERE `key`=? FOR UPDATE';

		$this->assertTrue($obj instanceof TestObject);
		$this->assertEquals(array('key'=>2,'value'=>2),$obj->toArray());
		$this->assertEquals($exp,$sql);
	}

	/**
	 */
	public function testRetrieveByPKs()
	{
		$objs = TestObjectDb::retrieveByPKs(array(1,3));
		$this->assertTrue($objs instanceof TestObjectSet);
		$this->assertEquals(2,$objs->count());
		$this->assertEquals(array('key'=>1,'value'=>1),$objs[1]->toArray());
		$this->assertEquals(array('key'=>3,'value'=>3),$objs[3]->toArray());

		$objs = TestObjectDb::retrieveByPKs(array());
		$this->assertTrue($objs instanceof TestObjectSet);
		$this->assertEquals(0,$objs->count());

		$objs = TestObjectDb::retrieveByPKs(array(1000,1001));
		$this->assertTrue($objs instanceof TestObjectSet);
		$this->assertEquals(0,$objs->count());
	}

	/**
	 */
	public function testRetrieveByPKsForUpdate()
	{
		$objs = TestObjectDb::retrieveByPKsForUpdate(array(1,2));

		$sql = last_sql();
		$exp = 'SELECT * FROM `test_object` WHERE `key` IN (?,?) FOR UPDATE';

		$this->assertTrue($objs instanceof TestObjectSet);
		$this->assertEquals(2,$objs->count());
		$this->assertEquals(array('key'=>1,'value'=>1),$objs[1]->toArray());
		$this->assertEquals(array('key'=>2,'value'=>2),$objs[2]->toArray());
		$this->assertEquals($exp,$sql);
	}

	public function testRetrieveByPKsForUpdateWithEmptyIds()
	{
		$objs = TestObjectDb::retrieveByPKsForUpdate(array());
		$sql = last_sql(); // sqlは吐かれないはず

		$this->assertTrue($objs instanceof TestObjectSet);
		$this->assertEquals(0,$objs->count());
		$this->assertNull($sql);
	}

	/**
	 * @depends testRetrieveByPK
	 */
	public function testInsert()
	{
		$array = array('key'=>10,'value'=>10);
		$in = new TestObject($array);
		TestObjectDb::insert($in);
		$out = TestObjectDb::retrieveByPK(10);
		$this->assertTrue($out instanceof TestObject);
		$this->assertEquals($array,$out->toArray());

		// auto_increment
		$table = TestObjectDb::TABLE_NAME;
		$createtable = mfwDBIBase::getRow("show create table $table");
		preg_match('/AUTO_INCREMENT=([0-9]*)/',$createtable['Create Table'],$m);
		$auto_increment = $m[1];

		$in = new TestObject(array('value'=>11));
		TestObjectDb::insert($in);
		$out = TestObjectDb::retrieveByPK($auto_increment);
		$this->assertTrue($out instanceof TestObject);
		$this->assertEquals(array('key'=>$auto_increment,'value'=>11),$out->toArray());
	}

	/**
	 * @depends testRetrieveByPK
	 */
	public function testUpdate()
	{
		$obj = TestObjectDb::retrieveByPK(2);
		$obj->setValue(20);
		TestObjectDb::update($obj);

		$obj2 = TestObjectDb::retrieveByPK(2);
		$this->assertEquals(array('key'=>2,'value'=>20),$obj2->toArray());
	}

	/**
	 * @expectedException PDOException
	 */
	public function testUpdateWithoutId()
	{
		$obj = new TestObject(array('value'=>30));
		TestObjectDb::update($obj);
	}

	/**
	 * @depends testSelectAll
	 */
	public function testDelete()
	{
		$before = TestObjectDb::selectAll();
		$count = $before->count();

		$obj = TestObjectDb::retrieveByPK(3);
		TestObjectDb::delete($obj);

		$objs = TestObjectDb::selectAll();
		$this->assertEquals($count-1,$objs->count());
		$this->assertFalse(isset($objs[3]));
	}

	/**
	 * @dataProvider inPlaceholderProvider
	 */
	public function testMakeInPlaceholder($list,$prefix,$expholder,$expbind)
	{
		$bind = array();
		$ret = TestObjectDb::makeInPlaceholder($list,$bind,$prefix);
		$this->assertEquals($expholder,$ret);
		$this->assertEquals($expbind,$bind);
	}

	public function inPlaceholderProvider()
	{
		return array(
			array(
				array(1,2,3),
				'',
				':_0,:_1,:_2',
				array(
					':_0' => 1,
					':_1' => 2,
					':_2' => 3,
					),
				),
			array(
				array('a','b','c'),
				'prefix',
				':prefix_0,:prefix_1,:prefix_2',
				array(
					':prefix_0' => 'a',
					':prefix_1' => 'b',
					':prefix_2' => 'c',
					),
				),
			array(
				array(),
				'hoge',
				null,
				array()
				),
			);
	}

}
?>
