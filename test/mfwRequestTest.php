<?php
require_once __DIR__.'/initialize.php';

mfwServerEnv::setEnv('unittest');

function getallheaders()
{
	return array(
		'Accept' => '*/*',
		'User-Agent' => 'Mozilla/4.0',
		'Host' => 'www.example.com',
		);
}

/**
 * Test class for mfwRequest.
 * Generated by PHPUnit on 2013-01-02 at 21:46:07.
 */
class mfwRequestTest extends PHPUnit_Framework_TestCase
{
	protected function clearStaticProperty($prop)
	{
		$p = new ReflectionProperty('mfwRequest',$prop);
		$p->setAccessible(true);
		$p->setValue(null);
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->clearStaticProperty('pathinfo');
		$this->clearStaticProperty('files');
		$this->clearStaticProperty('body');
		$this->clearStaticProperty('headers');
		$this->clearStaticProperty('user_agent');
		$this->clearStaticProperty('url');
		$this->clearStaticProperty('url_base');
		$this->clearStaticProperty('this_link_id');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 */
	public function testMethod()
	{
		$_SERVER['REQUEST_METHOD'] = 'GET';

		$method = mfwRequest::method();
		$this->assertEquals('GET',$method);
	}

	/**
	 */
	public function testGetPathInfoArray()
	{
		$_SERVER['PATH_INFO'] = '/aaa/bbb/ccc/ddd';

		$pathinfo = mfwRequest::getPathInfoArray();
		$exp = array('aaa','bbb','ccc','ddd');
		$this->assertEquals($exp,$pathinfo);

		unset($_SERVER['PATH_INFO']);
		$property_pathinfo = new ReflectionProperty('mfwRequest','pathinfo');
		$property_pathinfo->setAccessible(true);
		$property_pathinfo->setValue(null);
		$pathinfo = mfwRequest::getPathInfoArray();
		$this->assertEquals(array(),$pathinfo);

		$property_pathinfo->setValue(null);
	}

	/**
	 */
	public function testParam()
	{
		$_GET['param'] = 'param_get';
		$_POST['param'] = 'param_post';
		$_REQUEST['param'] = 'param_request';
		$_FILES['param'] = array(
			'name' => array('param_file0','param_file1'),
			'type' => array('image/jpeg','image/png'),
			'tmp_name' => array('/tmp/tmpfile0','/tmp/tmpfile1'),
			'error' => array(0,0),
			'size' => array(100,101),
			);

		$p = mfwRequest::param('param');
		$this->assertEquals('param_request',$p);
		$p = mfwRequest::param('param',null,'GET');
		$this->assertEquals('param_get',$p);
		$p = mfwRequest::param('param',null,'POST');
		$this->assertEquals('param_post',$p);
		$p = mfwRequest::param('param',null,'files');
		$this->assertEquals('param_file0',$p[0]['name']);
		$this->assertEquals('param_file1',$p[1]['name']);
		$this->assertEquals(100,$p[0]['size']);
		$this->assertEquals('/tmp/tmpfile1',$p[1]['tmp_name']);
	}

	public function testParamDefault(){
		unset($_GET['param']);
		unset($_POST['param']);
		unset($_REQUEST['param']);
		$p = mfwRequest::param('param','param_default');
		$this->assertEquals('param_default',$p);
		$p = mfwRequest::param('param','param_default','get');
		$this->assertEquals('param_default',$p);
		$p = mfwRequest::param('param','param_default','post');
		$this->assertEquals('param_default',$p);
	}

	public function testParamDefaultFiles(){
		$_FILES = array(
			'empty' => array(
				'name' => '',
				'type' => '',
				'tmp_name' => '',
				'error' => 4,
				'size' => 0,
				),
			);
		$default = array(
			'name'=>'default_file',
			'type'=>'image/gif',
			'tmp_name' => 'defaultfile',
			'error' => 0,
			'size'=>300,
			);
		$p = mfwRequest::param('empty',$default,'files');
		$this->assertEquals($p,$default);
		$p = mfwRequest::param('dummy',$default,'files');
		$this->assertEquals($p,$default);
	}

	/**
	 */
	public function testAllParams()
	{
		$_REQUEST = array(
			'param' => 'param_request'
			);
		$_GET = array(
			'param' => 'param_get'
			);
		$_POST = array(
			'param' => 'param_post'
			);
		$_FILES = array(
			'param' => array(
				'name' => 'filename',
				'type' => 'image/jpeg',
				'size' => 10,
				'error' => 0,
				'tmp_name' => '/tmp/tmpfile',
				),
			);

		$a = mfwRequest::allParams();
		$this->assertEquals($_REQUEST,$a);
		$a = mfwRequest::allParams('GET');
		$this->assertEquals($_GET,$a);
		$a = mfwRequest::allParams('post');
		$this->assertEquals($_POST,$a);
		$a = mfwRequest::allParams('files');
		$this->assertEquals($_FILES,$a);
	}

	/**
	 */
	public function testAllFiles()
	{
		$_FILES = array(
			'param1' => array(
				'name' => 'filename',
				'type' => 'image/jpeg',
				'tmp_name' => '/tmp/tmpfile',
				'error' => 0,
				'size' => 10,
				),
			'param2' => array(
				'name' => array('','param2_file1','param2_file2'),
				'type' => array('','image/png','application/octet-stream'),
				'tmp_name' => array('','/tmp/tmpfile1','/tmp/tmpfile2'),
				'error' => array(4,0,0),
				'size' => array(0,101,102),
				),
			'param3' => array(
				'name' => '',
				'type' => '',
				'tmp_name' => '',
				'error' => 4,
				'size' => 0,
				),
			);

		$exp = array(
			'param1' => array(
				'name' => 'filename',
				'type' => 'image/jpeg',
				'tmp_name' => '/tmp/tmpfile',
				'error' => 0,
				'size' => 10,
				),
			'param2' => array(
				1 => array(
					'name' => 'param2_file1',
					'type' => 'image/png',
					'tmp_name' => '/tmp/tmpfile1',
					'error' => 0,
					'size' => 101,
					),
				2 => array(
					'name' => 'param2_file2',
					'type' => 'application/octet-stream',
					'tmp_name' => '/tmp/tmpfile2',
					'error' => 0,
					'size' => 102,
					),
				),
			);

		$a = mfwRequest::allParams('FILES');
		$this->assertEquals($exp,$a);
	}

	/**
	 */
	public function testHas()
	{
		$_GET['param'] = 'param_get';
		$_POST['param'] = 'param_post';
		$_REQUEST['param'] = 'param_request';
		$_FILES['param2'] = array(
			'name'=>'','type'=>'','tmp_name'=>'','error'=>4,'size'=>0,
			);

		$this->assertTrue(mfwRequest::has('param'));
		$this->assertTrue(mfwRequest::has('param','GET'));
		$this->assertTrue(mfwRequest::has('param','POST'));
		$this->assertTrue(mfwRequest::has('param2'));
		$this->assertTrue(mfwRequest::has('param2','files'));
	}

	public function testNotHave(){
		unset($_GET['param']);
		unset($_POST['param']);
		unset($_REQUEST['param']);
		unset($_FILES['param']);
		$this->assertFalse(mfwRequest::has('param'));
		$this->assertFalse(mfwRequest::has('param','GET'));
		$this->assertFalse(mfwRequest::has('param','POST'));
		$this->assertFalse(mfwRequest::has('param','FILES'));
	}

	/**
	 */
	public function testHasFile(){
		// アップロードされてなくてもキーがあればtreu
		$_REQUEST = array();
		$_FILES = array(
			'param1' => array(
				'name' => 'filename',
				'type' => 'image/jpeg',
				'tmp_name' => '/tmp/tmpfile',
				'error' => 0,
				'size' => 10,
				),
			'param2' => array(
				'name' => array('','param2_file1','param2_file2'),
				'type' => array('','image/png','application/octet-stream'),
				'tmp_name' => array('','/tmp/tmpfile1','/tmp/tmpfile2'),
				'error' => array(4,0,0),
				'size' => array(0,101,102),
				),
			'param3' => array(
				'name' => '',
				'type' => '',
				'tmp_name' => '',
				'error' => 4,
				'size' => 0,
				),
			);

		$this->assertTrue(mfwRequest::has('param1'));
		$this->assertTrue(mfwRequest::has('param2'));
		$this->assertTrue(mfwRequest::has('param3'));
		$this->assertFalse(mfwRequest::has('param4'));
	}

	/**
	 */
	public function testBody()
	{
		MockFunction::replace('file_get_contents',function($f){
				return ($f==='php://input')? 'request body': 'dummy';
			},true);
		$body = mfwRequest::body();
		MockFunction::restore('file_get_contents');
		$this->assertEquals('request body',$body);

		// check for cache
		MockFunction::replace('file_get_contents','dummy');
		$body = mfwRequest::body();
		MockFunction::restore('file_get_contents');
		$this->assertEquals('request body',$body);
	}

	public function testAllHeaders()
	{
		$headers = mfwRequest::allHeaders();
		$exp = getallheaders();
		$this->assertEquals($exp,$headers);
	}

	/**
	 */
	public function testHeader()
	{
		$h = mfwRequest::header('Accept');
		$this->assertEquals('*/*',$h);
		$h = mfwRequest::header('User-Agent');
		$this->assertEquals('Mozilla/4.0',$h);
		$h = mfwRequest::header('undef');
		$this->assertNull($h);
	}

	/**
	 */
	public function testUserAgent()
	{
		$_SERVER['HTTP_USER_AGENT'] = 'Mozilla/4.0';

		$ua1 = mfwRequest::userAgent();
		$this->assertTrue($ua1 instanceof mfwUserAgent);

		$ua2 = mfwRequest::userAgent();
		$hash1 = spl_object_hash($ua1);
		$hash2 = spl_object_hash($ua2);
		$this->assertEquals($hash1,$hash2);
	}

	/**
	 */
	public function testUrl()
	{
		unset($_SERVER['HTTPS']);
		$_SERVER['HTTP_HOST'] = 'www.example.com';
		$_SERVER['REQUEST_URI'] = '/path/main.php?param=1';

		$exp = 'http://www.example.com/path/main.php?param=1';
		$url = mfwRequest::url();
		$this->assertEquals($exp,$url);

		$property_url = new ReflectionProperty('mfwRequest','url');
		$property_url->setAccessible(true);
		$property_url->setValue(null);

		$_SERVER['HTTPS'] = 'on';
		$exp = 'https://www.example.com/path/main.php?param=1';
		$url = mfwRequest::url();
		$this->assertEquals($exp,$url);

		$property_url->setValue(null);
	}

	/**
	 */
	public function testMakeUrl()
	{
		$property_url_base = new ReflectionProperty('mfwRequest','url_base');
		$property_url_base->setAccessible(true);

		unset($_SERVER['HTTPS']);
		$_SERVER['HTTP_HOST'] = 'www.example.com';
		$_SERVER['SCRIPT_NAME'] = '/path/main.php';

		$property_url_base->setValue(null);
		$url = mfwRequest::makeUrl('/aaa');
		$this->assertEquals('http://www.example.com/path/aaa',$url);

		$property_url_base->setValue(null);
		$url = mfwRequest::makeUrl('/bbb','https');
		$this->assertEquals('https://www.example.com/path/bbb',$url);

		$property_url_base->setValue(null);
		$_SERVER['HTTPS'] = 'on';
		$url = mfwRequest::makeUrl('/ccc');
		$this->assertEquals('https://www.example.com/path/ccc',$url);

		$property_url_base->setValue(null);
	}

	/**
	 */
	public function testLinkId()
	{
		$_REQUEST['link_id'] = '1234567890';
		$link_id = mfwRequest::linkId();
		$this->assertEquals('1234567890',$link_id);

		unset($_REQUEST['link_id']);
		$link_id = mfwRequest::linkId();
		$this->assertNull($link_id);
	}

	/**
	 */
	public function testMakeLinkId()
	{
		$url = 'http://example.com/index.html';
		$exp = mfwMemcache::storeURL($url);
		$link_id = mfwRequest::makeLinkId($url);
		$this->assertEquals($exp,$link_id);
	}

	/**
	 */
	public function testMakeThisLinkId()
	{
		unset($_SERVER['HTTPS']);
		$_SERVER['HTTP_HOST'] = 'www.example.com';
		$_SERVER['REQUEST_URI'] = '/path/main.php?param=1';

		$link_id = mfwRequest::makeThisLinkId();
		$exp = mfwMemcache::storeURL('http://www.example.com/path/main.php?param=1');
		$this->assertEquals($exp,$link_id);
	}

	/**
	 */
	public function testGetReturnUrl()
	{
		$url = 'https://www.example.com/path1/path2?param1=1';
		$link_id = mfwRequest::makeLinkId($url);
		$ret = mfwRequest::getReturnUrl($link_id);
		$this->assertEquals($url,$ret);

		$url = 'https://www.example.com/path1/path2?param1=1&param2=2';
		$link_id = mfwRequest::makeLinkId($url);
		$_REQUEST['link_id'] = $link_id;
		$ret = mfwRequest::getReturnUrl();
		$this->assertEquals($url,$ret);
	}
}
?>
