<?php
require_once __DIR__.'/initialize.php';

class TestServerEnv extends mfwServerEnv {
	public static function getConfig()
	{
		return self::$config;
	}

	public static function loadConfig($cat)
	{
		return parent::loadConfig($cat);
	}

	public static function clearMemberVars()
	{
		parent::$env = null;
		parent::$config = null;
		parent::$dbauth = array();
	}
}


/**
 * Test class for mfwServerEnv.
 * Generated by PHPUnit on 2012-12-24 at 15:15:12.
 */
class mfwServerEnvTest extends PHPUnit_Framework_TestCase
{
	protected $conf;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		include APP_ROOT.'/config/mfw_serverenv_config.php';
		$this->conf = $serverenv_config;

		TestServerEnv::clearMemberVars();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 */
	public function testSetEnv()
	{
		mfwServerEnv::setEnv('unittest');
		$this->assertEquals('unittest',mfwServerEnv::getEnv());
		$this->assertEquals($this->conf['unittest'],TestServerEnv::getConfig());

		elb_start();
		mfwServerEnv::setEnv('undefined');
		$errorlog = elb_get_clean();

		$this->assertEquals('undefined',mfwServerEnv::getEnv());
		$this->assertNull(TestServerEnv::getConfig());
		$this->assertTrue(strpos($errorlog,'undefined environment')!==false,$errorlog);

	}

	/**
	 */
	public function testLoadConfig()
	{
		elb_start(); // error_log出力抑制
		TestServerEnv::setEnv('undefined2');
		elb_get_clean(); // clear buffer

		$msg = '';
		try{
			TestServerEnv::loadConfig('category');
		}
		catch(InvalidArgumentException $e){
			$msg = $e->getMessage();
		}
		$this->assertStringStartsWith('mfwServerEnv: invalid environment',$msg);
		elb_get_clean(); // clear buffer

		mfwServerEnv::setEnv('unittest');
		$config = TestServerEnv::loadConfig('memcache');
		$exp = $this->conf['unittest']['memcache'];
		$this->assertEquals($exp,$config);

		elb_start();
		$config = TestServerEnv::loadConfig('undefined');
		$err = elb_get_clean();
		$this->assertNull($config);
		$this->assertTrue(strpos($err,'undefined category')!==false,$err);
	}

	/**
	 */
	public function testHttpProxy()
	{
		mfwServerEnv::setEnv('unittest');
		$exp = array(
			'host' => '127.0.0.1',
			'port' => 10080,
			);
		$conf = mfwServerEnv::httpProxy();
		$this->assertEquals($exp,$conf);

		mfwServerEnv::setEnv('noserver');
		elb_start();
		$conf = mfwServerEnv::httpProxy();
		$err = elb_get_clean();
		$this->assertNull($conf);
		$this->assertTrue(strpos($err,'undefined category: http_proxy')!==false,$err);

		mfwServerEnv::setEnv('illegalenv');
		elb_start();
		$conf = mfwServerEnv::httpProxy();
		$err = elb_get_clean();
		$this->assertNull($conf);
		$this->assertTrue(strpos($err,'http_proxy: host/port is not defined')!==false,$err);
	}

	/**
	 */
	public function testDatabaseSetting()
	{
		mfwServerEnv::setEnv('unittest');
		$exp = array(
			'dsn' => 'mysql:dbname=unittest;host=localhost',
			'user' => 'unittest',
			'pass' => 'unittestpass',
			);
		$conf = mfwServerEnv::databaseSetting('default_master');
		$this->assertEquals($exp,$conf);

		elb_start();
		mfwServerEnv::setEnv('noserver');
		$conf = mfwServerEnv::databaseSetting('undefined');
		$err = elb_get_clean();
		$this->assertNull($conf);
		$this->assertTrue(strpos($err,'database: authfile/dsn(undefined) is not defined')!==false,$err);

		mfwServerEnv::setEnv('illegalenv');
		$msg = '';
		try{
			$conf = mfwServerEnv::databaseSetting('default_master');
		}
		catch(Exception $e){
			$msg = $e->getMessage();
		}
		$this->assertStringStartsWith('mfwServerEnv: no database authfile',$msg);
	}

	/**
	 */
	public function testMemcache()
	{
		$exp = array(
			'host' => 'localhost',
			'port' => 11211,
			);
		mfwServerEnv::setEnv('unittest');
		$conf = mfwServerEnv::memcache();
		$this->assertEquals($exp,$conf);

		mfwServerEnv::setEnv('illegalenv');
		elb_start();
		$conf = mfwServerEnv::memcache();
		$err = elb_get_clean();
		$this->assertNull($conf);
		$this->assertTrue(strpos($err,'memcache: host/port is not defined')!==false,$err);
	}

	/**
	 */
	public function testSwfmill()
	{
		mfwServerEnv::setEnv('unittest');

		$swfmill = mfwServerEnv::swfmill();
		$this->assertEquals('/usr/local/bin/swfmill',$swfmill);
	}

	/**
	 * @dataProvider cachePrefixProvider
	 */
	public function testCachePrefix($env,$exp_prefix)
	{
		elb_start();
		mfwServerEnv::setEnv($env);
		elb_get_clean();

		$prefix = mfwServerEnv::cachePrefix();
		$this->assertEquals($exp_prefix,$prefix);
	}
	public function cachePrefixProvider()
	{
		return array(
			array('','unittest-env__test_'),
			array('unittest','unittest-env_unittest_test_'),
			array('illegalenv','unittest-env_illegalenv_test_'),
			);
	}

}
?>
